//
//   Copyright (c) 2003-2008 John Plevyak, All Rights Reserved
//
// primitive descriptions
//
//  VARIABLE - compiler variable holding the primitive descritor
//  NAME - string used by if1_set_builtin to associate this primitive with a Sym
//  #ARGUMENTS - number of arguments, -N means variable but at least N
//  POSITION - position of the primitive within the call
//  (optional) #RESULTS - number of results, -N means variable but at least N default is 1
//  ARGUMENT_TYPES - types of arguments for vararg, last repeats
//  RETURN_TYPES - type of return variable, often ANY which is handled directly in fa.cpp
//
//  optional arguments:
//    nonfunctional - (can't be dead code eliminated if their lvals aren't used)
//

prim_operator "operator" -2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
// operators e.g. rvals = (prim_operator, a, prim_add, b)
prim_period "." 3 1 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} nonfunctional;
prim_setter ".=" 4 1 {PRIM_TYPE_ANY, PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} nonfunctional;
prim_pow "**" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_ANY_NUM_AB} ;
prim_mult "*" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_ANY_NUM_AB} ;
prim_div "/" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_ANY_NUM_AB} ;
prim_mod "%" 3 1 {PRIM_TYPE_ANY_INT_A, PRIM_TYPE_ANY_INT_B} {PRIM_TYPE_A} ;
prim_add "+" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_ANY_NUM_AB} ;
prim_subtract "-" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_ANY_NUM_AB} ;
prim_lsh "<<" 3 1 {PRIM_TYPE_ANY_INT_A, PRIM_TYPE_ANY_INT_B} {PRIM_TYPE_ANY_NUM_A} ;
prim_rsh ">>" 3 1 {PRIM_TYPE_ANY_INT_A, PRIM_TYPE_ANY_INT_B} {PRIM_TYPE_ANY_NUM_A} ;
prim_less "<" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_BOOL} ;
prim_lessorequal "<=" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_BOOL} ;
prim_greater ">" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_BOOL} ;
prim_greaterorequal ">=" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_BOOL} ;
prim_equal "==" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_BOOL} ;
prim_notequal "!=" 3 1 {PRIM_TYPE_ANY_NUM_A, PRIM_TYPE_ANY_NUM_B} {PRIM_TYPE_BOOL} ;
prim_and "&" 3 1 {PRIM_TYPE_ANY_INT_A, PRIM_TYPE_ANY_INT_B} {PRIM_TYPE_ANY_NUM_AB} ;
prim_xor "^" 3 1 {PRIM_TYPE_ANY_INT_A, PRIM_TYPE_ANY_INT_B} {PRIM_TYPE_ANY_NUM_AB} ;
prim_or "|" 3 1 {PRIM_TYPE_ANY_INT_A, PRIM_TYPE_ANY_INT_B} {PRIM_TYPE_ANY_NUM_AB} ;
prim_land "&&" 3 1 {PRIM_TYPE_ANY_INT_A, PRIM_TYPE_ANY_INT_B} {PRIM_TYPE_BOOL} ;
prim_lor "||" 3 1 {PRIM_TYPE_ANY_INT_A, PRIM_TYPE_ANY_INT_B} {PRIM_TYPE_BOOL} ;
prim_assign "=" 3 1 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_apply "^^" 3 1 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_by "by" 3 1 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_seqcat "#" 3 1 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_plus "+" 2 0 {PRIM_TYPE_ANY_NUM_A} {PRIM_TYPE_A} ;
prim_minus "-" 2 0 {PRIM_TYPE_ANY_NUM_A} {PRIM_TYPE_ANY_NUM_A} ;
prim_not "~" 2 0 {PRIM_TYPE_ANY_INT_A} {PRIM_TYPE_ANY_NUM_A} ;
prim_lnot "!" 2 0 {PRIM_TYPE_ANY_INT_A} {PRIM_TYPE_BOOL} ;
prim_deref "*" 2 0 {PRIM_TYPE_REF} {PRIM_TYPE_ANY} ;
prim_ref "&" 2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_cast "(" 3 0 {PRIM_TYPE_SYMBOL, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_strcat "::" 3 1 {PRIM_TYPE_STRING, PRIM_TYPE_STRING} {PRIM_TYPE_STRING};

prim_primitive "primitive" -2 0 -1 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY};
// builtin primitives e.g. rvals = (prim_primitive, prim_reply, c, v)
prim_reply  "reply" -3 0 {PRIM_TYPE_CONT, PRIM_TYPE_ALL} {PRIM_TYPE_ALL} nonfunctional;
prim_tuple "make_tuple" -2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_vector "make_vector" -2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_continuation "make_continuation" -2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_new "new" -2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_clone "clone" -2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_index_object "index_object" -3 0 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_set_index_object "set_index_object" -4 0 {PRIM_TYPE_ANY, PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} nonfunctional;
prim_meta_apply "meta_apply" 3 0 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_destruct "destruct" 2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} nonfunctional;
prim_set "make_set" -2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_list "make_list" -2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_coerce "coerce" -3 0 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_merge "merge" -3 0 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_merge_in "merge_in" -3 0 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_type_assert "type_assert" 3 0 {PRIM_TYPE_ANY, PRIM_TYPE_ANY} {PRIM_TYPE_ANY} ;
prim_len "len" 2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY};
prim_sizeof "sizeof" 2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_ANY};
prim_sizeof_element "sizeof_element" 2 0 {PRIM_TYPE_ANY} {PRIM_TYPE_SIZE};

